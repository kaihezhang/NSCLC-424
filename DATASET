import os
import torch
import pandas as pd
import nibabel as nib
import numpy as np
import json
from PIL import Image
from torch.utils.data import Dataset
from torchvision import transforms

class RNACustomDataset(Dataset):
    def __init__(self, rna_data, image_filenames, image_directory, bbox_json_path, transform=None):
        self.rna_data = rna_data.reset_index(drop=True)
        self.image_filenames = image_filenames
        self.image_directory = image_directory
        self.transform = transform

        # 加载Bounding Box坐标信息
        with open(bbox_json_path, 'r') as f:
            self.bbox_coords = json.load(f)

        # 筛选有效样本（存在于bbox_coords中）
        self.valid_indices = [
            i for i, fname in enumerate(self.image_filenames)
            if fname in self.bbox_coords and os.path.exists(os.path.join(image_directory, fname))
        ]

    def __len__(self):
        return len(self.valid_indices)

    def __getitem__(self, idx):
        true_idx = self.valid_indices[idx]

        # RNA数据加载
        rna_sample = torch.tensor(self.rna_data.iloc[true_idx].values.astype(float)).float()

        # CT图像加载
        img_filename = self.image_filenames[true_idx]
        img_path = os.path.join(self.image_directory, img_filename)
        nii_image = nib.load(img_path)
        image_volume = nii_image.get_fdata()

        # 提取Bounding Box坐标
        seg_key = f"seg{img_filename}"  # segR01007.nii.gz
        bbox = self.bbox_coords[seg_key]
        x_min, x_max = bbox['x_min'], bbox['x_max']
        y_min, y_max = bbox['y_min'], bbox['y_max']
        z_min, z_max = bbox['z_min'], bbox['z_max']

        # 使用Bounding Box提取ROI
        roi_volume = image_volume[x_min:x_max, y_min:y_max, z_min:z_max]

        # 提取ROI区域中间切片
        mid_slice = roi_volume[:, :, roi_volume.shape[2] // 2]

        # 转为RGB通道图像
        rgb_slice = np.stack([mid_slice] * 3, axis=-1)
        image = Image.fromarray(np.uint8(rgb_slice))

        if self.transform:
            image = self.transform(image)

        return rna_sample, image
